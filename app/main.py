import streamlit as st
from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification
import torch


@st.cache_resource
def load_sentiment_model():
    model_name = "SiberianNLP/rubert-base-cased-sentiment-rusentiment"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name)
    return pipeline("text-classification", model=model, tokenizer=tokenizer)


def main():
    st.title("üìù –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
    st.write("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏ (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π)")

    classifier = load_sentiment_model()

    text = st.text_area("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç:", height=150)

    if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å") and text:
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
            try:
                result = classifier(text)[0]
                label = result['label']
                score = result['score']

                emoji_dict = {
                    'neutral': "üòê",
                    'positive': "üòä",
                    'negative': "üò†"
                }
                emoji = emoji_dict.get(label, "ü§î")
                st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {label.capitalize()} {emoji}")

                st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", f"{score * 100:.1f}%")

                with torch.no_grad():
                    inputs = classifier.tokenizer(text, return_tensors="pt", truncation=True, padding=True)
                    outputs = classifier.model(**inputs)
                    probs = torch.nn.functional.softmax(outputs.logits, dim=-1)[0]

                st.write("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
                labels = ['neutral', 'positive', 'negative']
                probabilities = {label: probs[i].item() for i, label in enumerate(labels)}

                cols = st.columns(3)
                for col, (label, prob) in zip(cols, probabilities.items()):
                    with col:
                        st.write(f"{label.capitalize()}")
                        st.progress(prob, text=f"{prob * 100:.1f}%")
                        st.caption(f"{emoji_dict[label]} {prob * 100:.1f}%")

            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    elif not text:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


if __name__ == "__main__":
    main()